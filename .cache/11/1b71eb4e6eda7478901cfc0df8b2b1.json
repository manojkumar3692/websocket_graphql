{"id":"../node_modules/recharts-scale/lib/getNiceTickValues.js","dependencies":[{"name":"/Users/manojkumars/Documents/websocket_react/package.json","includedInParent":true,"mtime":1582035290445},{"name":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/package.json","includedInParent":true,"mtime":1581928656383},{"name":"decimal.js-light","loc":{"line":8,"column":46},"parent":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/lib/getNiceTickValues.js","resolved":"/Users/manojkumars/Documents/websocket_react/node_modules/decimal.js-light/decimal.js"},{"name":"./util/utils","loc":{"line":10,"column":21},"parent":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/lib/getNiceTickValues.js","resolved":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/lib/util/utils.js"},{"name":"./util/arithmetic","loc":{"line":12,"column":49},"parent":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/lib/getNiceTickValues.js","resolved":"/Users/manojkumars/Documents/websocket_react/node_modules/recharts-scale/lib/util/arithmetic.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTickValuesFixedDomain = exports.getTickValues = exports.getNiceTickValues = void 0;\n\nvar _decimal = _interopRequireDefault(require(\"decimal.js-light\"));\n\nvar _utils = require(\"./util/utils\");\n\nvar _arithmetic = _interopRequireDefault(require(\"./util/arithmetic\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Calculate a interval of a minimum value and a maximum value\n *\n * @param  {Number} min       The minimum value\n * @param  {Number} max       The maximum value\n * @return {Array} An interval\n */\nfunction getValidInterval(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      min = _ref2[0],\n      max = _ref2[1];\n\n  var validMin = min,\n      validMax = max; // exchange\n\n  if (min > max) {\n    validMin = max;\n    validMax = min;\n  }\n\n  return [validMin, validMax];\n}\n/**\n * Calculate the step which is easy to understand between ticks, like 10, 20, 25\n *\n * @param  {Decimal} roughStep        The rough step calculated by deviding the\n * difference by the tickCount\n * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not\n * @param  {Integer} correctionFactor A correction factor\n * @return {Decimal} The step which is easy to understand between two ticks\n */\n\n\nfunction getFormatStep(roughStep, allowDecimals, correctionFactor) {\n  if (roughStep.lte(0)) {\n    return new _decimal.default(0);\n  }\n\n  var digitCount = _arithmetic.default.getDigitCount(roughStep.toNumber()); // The ratio between the rough step and the smallest number which has a bigger\n  // order of magnitudes than the rough step\n\n\n  var digitCountValue = new _decimal.default(10).pow(digitCount);\n  var stepRatio = roughStep.div(digitCountValue); // When an integer and a float multiplied, the accuracy of result may be wrong\n\n  var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;\n  var amendStepRatio = new _decimal.default(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);\n  var formatStep = amendStepRatio.mul(digitCountValue);\n  return allowDecimals ? formatStep : new _decimal.default(Math.ceil(formatStep));\n}\n/**\n * calculate the ticks when the minimum value equals to the maximum value\n *\n * @param  {Number}  value         The minimum valuue which is also the maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}                 ticks\n */\n\n\nfunction getTickOfSingleValue(value, tickCount, allowDecimals) {\n  var step = 1; // calculate the middle value of ticks\n\n  var middle = new _decimal.default(value);\n\n  if (!middle.isint() && allowDecimals) {\n    var absVal = Math.abs(value);\n\n    if (absVal < 1) {\n      // The step should be a float number when the difference is smaller than 1\n      step = new _decimal.default(10).pow(_arithmetic.default.getDigitCount(value) - 1);\n      middle = new _decimal.default(Math.floor(middle.div(step).toNumber())).mul(step);\n    } else if (absVal > 1) {\n      // Return the maximum integer which is smaller than 'value' when 'value' is greater than 1\n      middle = new _decimal.default(Math.floor(value));\n    }\n  } else if (value === 0) {\n    middle = new _decimal.default(Math.floor((tickCount - 1) / 2));\n  } else if (!allowDecimals) {\n    middle = new _decimal.default(Math.floor(value));\n  }\n\n  var middleIndex = Math.floor((tickCount - 1) / 2);\n  var fn = (0, _utils.compose)((0, _utils.map)(function (n) {\n    return middle.add(new _decimal.default(n - middleIndex).mul(step)).toNumber();\n  }), _utils.range);\n  return fn(0, tickCount);\n}\n/**\n * Calculate the step\n *\n * @param  {Number}  min              The minimum value of an interval\n * @param  {Number}  max              The maximum value of an interval\n * @param  {Integer} tickCount        The count of ticks\n * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not\n * @param  {Number}  correctionFactor A correction factor\n * @return {Object}  The step, minimum value of ticks, maximum value of ticks\n */\n\n\nfunction calculateStep(min, max, tickCount, allowDecimals) {\n  var correctionFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  // dirty hack (for recharts' test)\n  if (!Number.isFinite((max - min) / (tickCount - 1))) {\n    return {\n      step: new _decimal.default(0),\n      tickMin: new _decimal.default(0),\n      tickMax: new _decimal.default(0)\n    };\n  } // The step which is easy to understand between two ticks\n\n\n  var step = getFormatStep(new _decimal.default(max).sub(min).div(tickCount - 1), allowDecimals, correctionFactor); // A medial value of ticks\n\n  var middle; // When 0 is inside the interval, 0 should be a tick\n\n  if (min <= 0 && max >= 0) {\n    middle = new _decimal.default(0);\n  } else {\n    // calculate the middle value\n    middle = new _decimal.default(min).add(max).div(2); // minus modulo value\n\n    middle = middle.sub(new _decimal.default(middle).mod(step));\n  }\n\n  var belowCount = Math.ceil(middle.sub(min).div(step).toNumber());\n  var upCount = Math.ceil(new _decimal.default(max).sub(middle).div(step).toNumber());\n  var scaleCount = belowCount + upCount + 1;\n\n  if (scaleCount > tickCount) {\n    // When more ticks need to cover the interval, step should be bigger.\n    return calculateStep(min, max, tickCount, allowDecimals, correctionFactor + 1);\n  }\n\n  if (scaleCount < tickCount) {\n    // When less ticks can cover the interval, we should add some additional ticks\n    upCount = max > 0 ? upCount + (tickCount - scaleCount) : upCount;\n    belowCount = max > 0 ? belowCount : belowCount + (tickCount - scaleCount);\n  }\n\n  return {\n    step: step,\n    tickMin: middle.sub(new _decimal.default(belowCount).mul(step)),\n    tickMax: middle.add(new _decimal.default(upCount).mul(step))\n  };\n}\n/**\n * Calculate the ticks of an interval, the count of ticks will be guraranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getNiceTickValuesFn(_ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      min = _ref4[0],\n      max = _ref4[1];\n\n  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // More than two ticks should be return\n  var count = Math.max(tickCount, 2);\n\n  var _getValidInterval = getValidInterval([min, max]),\n      _getValidInterval2 = _slicedToArray(_getValidInterval, 2),\n      cormin = _getValidInterval2[0],\n      cormax = _getValidInterval2[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray((0, _utils.range)(0, tickCount - 1).map(function () {\n      return Infinity;\n    }))) : _toConsumableArray((0, _utils.range)(0, tickCount - 1).map(function () {\n      return -Infinity;\n    })).concat([cormax]);\n\n    return min > max ? (0, _utils.reverse)(_values) : _values;\n  }\n\n  if (cormin === cormax) {\n    return getTickOfSingleValue(cormin, tickCount, allowDecimals);\n  } // Get the step between two ticks\n\n\n  var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals),\n      step = _calculateStep.step,\n      tickMin = _calculateStep.tickMin,\n      tickMax = _calculateStep.tickMax;\n\n  var values = _arithmetic.default.rangeStep(tickMin, tickMax.add(new _decimal.default(0.1).mul(step)), step);\n\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n/**\n * Calculate the ticks of an interval, the count of ticks won't be guraranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getTickValuesFn(_ref5) {\n  var _ref6 = _slicedToArray(_ref5, 2),\n      min = _ref6[0],\n      max = _ref6[1];\n\n  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // More than two ticks should be return\n  var count = Math.max(tickCount, 2);\n\n  var _getValidInterval3 = getValidInterval([min, max]),\n      _getValidInterval4 = _slicedToArray(_getValidInterval3, 2),\n      cormin = _getValidInterval4[0],\n      cormax = _getValidInterval4[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    return [min, max];\n  }\n\n  if (cormin === cormax) {\n    return getTickOfSingleValue(cormin, tickCount, allowDecimals);\n  }\n\n  var step = getFormatStep(new _decimal.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);\n  var fn = (0, _utils.compose)((0, _utils.map)(function (n) {\n    return new _decimal.default(cormin).add(new _decimal.default(n).mul(step)).toNumber();\n  }), _utils.range);\n  var values = fn(0, count).filter(function (entry) {\n    return entry >= cormin && entry <= cormax;\n  });\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n/**\n * Calculate the ticks of an interval, the count of ticks won't be guraranteed,\n * but the domain will be guaranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getTickValuesFixedDomainFn(_ref7, tickCount) {\n  var _ref8 = _slicedToArray(_ref7, 2),\n      min = _ref8[0],\n      max = _ref8[1];\n\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  // More than two ticks should be return\n  var _getValidInterval5 = getValidInterval([min, max]),\n      _getValidInterval6 = _slicedToArray(_getValidInterval5, 2),\n      cormin = _getValidInterval6[0],\n      cormax = _getValidInterval6[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    return [min, max];\n  }\n\n  if (cormin === cormax) {\n    return [cormin];\n  }\n\n  var count = Math.max(tickCount, 2);\n  var step = getFormatStep(new _decimal.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);\n\n  var values = _toConsumableArray(_arithmetic.default.rangeStep(new _decimal.default(cormin), new _decimal.default(cormax).sub(new _decimal.default(0.99).mul(step)), step)).concat([cormax]);\n\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n\nvar getNiceTickValues = (0, _utils.memoize)(getNiceTickValuesFn);\nexports.getNiceTickValues = getNiceTickValues;\nvar getTickValues = (0, _utils.memoize)(getTickValuesFn);\nexports.getTickValues = getTickValues;\nvar getTickValuesFixedDomain = (0, _utils.memoize)(getTickValuesFixedDomainFn);\nexports.getTickValuesFixedDomain = getTickValuesFixedDomain;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/recharts-scale/lib/getNiceTickValues.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}}],"sources":{"../node_modules/recharts-scale/lib/getNiceTickValues.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTickValuesFixedDomain = exports.getTickValues = exports.getNiceTickValues = void 0;\n\nvar _decimal = _interopRequireDefault(require(\"decimal.js-light\"));\n\nvar _utils = require(\"./util/utils\");\n\nvar _arithmetic = _interopRequireDefault(require(\"./util/arithmetic\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Calculate a interval of a minimum value and a maximum value\n *\n * @param  {Number} min       The minimum value\n * @param  {Number} max       The maximum value\n * @return {Array} An interval\n */\nfunction getValidInterval(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      min = _ref2[0],\n      max = _ref2[1];\n\n  var validMin = min,\n      validMax = max; // exchange\n\n  if (min > max) {\n    validMin = max;\n    validMax = min;\n  }\n\n  return [validMin, validMax];\n}\n/**\n * Calculate the step which is easy to understand between ticks, like 10, 20, 25\n *\n * @param  {Decimal} roughStep        The rough step calculated by deviding the\n * difference by the tickCount\n * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not\n * @param  {Integer} correctionFactor A correction factor\n * @return {Decimal} The step which is easy to understand between two ticks\n */\n\n\nfunction getFormatStep(roughStep, allowDecimals, correctionFactor) {\n  if (roughStep.lte(0)) {\n    return new _decimal.default(0);\n  }\n\n  var digitCount = _arithmetic.default.getDigitCount(roughStep.toNumber()); // The ratio between the rough step and the smallest number which has a bigger\n  // order of magnitudes than the rough step\n\n\n  var digitCountValue = new _decimal.default(10).pow(digitCount);\n  var stepRatio = roughStep.div(digitCountValue); // When an integer and a float multiplied, the accuracy of result may be wrong\n\n  var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;\n  var amendStepRatio = new _decimal.default(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);\n  var formatStep = amendStepRatio.mul(digitCountValue);\n  return allowDecimals ? formatStep : new _decimal.default(Math.ceil(formatStep));\n}\n/**\n * calculate the ticks when the minimum value equals to the maximum value\n *\n * @param  {Number}  value         The minimum valuue which is also the maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}                 ticks\n */\n\n\nfunction getTickOfSingleValue(value, tickCount, allowDecimals) {\n  var step = 1; // calculate the middle value of ticks\n\n  var middle = new _decimal.default(value);\n\n  if (!middle.isint() && allowDecimals) {\n    var absVal = Math.abs(value);\n\n    if (absVal < 1) {\n      // The step should be a float number when the difference is smaller than 1\n      step = new _decimal.default(10).pow(_arithmetic.default.getDigitCount(value) - 1);\n      middle = new _decimal.default(Math.floor(middle.div(step).toNumber())).mul(step);\n    } else if (absVal > 1) {\n      // Return the maximum integer which is smaller than 'value' when 'value' is greater than 1\n      middle = new _decimal.default(Math.floor(value));\n    }\n  } else if (value === 0) {\n    middle = new _decimal.default(Math.floor((tickCount - 1) / 2));\n  } else if (!allowDecimals) {\n    middle = new _decimal.default(Math.floor(value));\n  }\n\n  var middleIndex = Math.floor((tickCount - 1) / 2);\n  var fn = (0, _utils.compose)((0, _utils.map)(function (n) {\n    return middle.add(new _decimal.default(n - middleIndex).mul(step)).toNumber();\n  }), _utils.range);\n  return fn(0, tickCount);\n}\n/**\n * Calculate the step\n *\n * @param  {Number}  min              The minimum value of an interval\n * @param  {Number}  max              The maximum value of an interval\n * @param  {Integer} tickCount        The count of ticks\n * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not\n * @param  {Number}  correctionFactor A correction factor\n * @return {Object}  The step, minimum value of ticks, maximum value of ticks\n */\n\n\nfunction calculateStep(min, max, tickCount, allowDecimals) {\n  var correctionFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  // dirty hack (for recharts' test)\n  if (!Number.isFinite((max - min) / (tickCount - 1))) {\n    return {\n      step: new _decimal.default(0),\n      tickMin: new _decimal.default(0),\n      tickMax: new _decimal.default(0)\n    };\n  } // The step which is easy to understand between two ticks\n\n\n  var step = getFormatStep(new _decimal.default(max).sub(min).div(tickCount - 1), allowDecimals, correctionFactor); // A medial value of ticks\n\n  var middle; // When 0 is inside the interval, 0 should be a tick\n\n  if (min <= 0 && max >= 0) {\n    middle = new _decimal.default(0);\n  } else {\n    // calculate the middle value\n    middle = new _decimal.default(min).add(max).div(2); // minus modulo value\n\n    middle = middle.sub(new _decimal.default(middle).mod(step));\n  }\n\n  var belowCount = Math.ceil(middle.sub(min).div(step).toNumber());\n  var upCount = Math.ceil(new _decimal.default(max).sub(middle).div(step).toNumber());\n  var scaleCount = belowCount + upCount + 1;\n\n  if (scaleCount > tickCount) {\n    // When more ticks need to cover the interval, step should be bigger.\n    return calculateStep(min, max, tickCount, allowDecimals, correctionFactor + 1);\n  }\n\n  if (scaleCount < tickCount) {\n    // When less ticks can cover the interval, we should add some additional ticks\n    upCount = max > 0 ? upCount + (tickCount - scaleCount) : upCount;\n    belowCount = max > 0 ? belowCount : belowCount + (tickCount - scaleCount);\n  }\n\n  return {\n    step: step,\n    tickMin: middle.sub(new _decimal.default(belowCount).mul(step)),\n    tickMax: middle.add(new _decimal.default(upCount).mul(step))\n  };\n}\n/**\n * Calculate the ticks of an interval, the count of ticks will be guraranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getNiceTickValuesFn(_ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      min = _ref4[0],\n      max = _ref4[1];\n\n  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // More than two ticks should be return\n  var count = Math.max(tickCount, 2);\n\n  var _getValidInterval = getValidInterval([min, max]),\n      _getValidInterval2 = _slicedToArray(_getValidInterval, 2),\n      cormin = _getValidInterval2[0],\n      cormax = _getValidInterval2[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray((0, _utils.range)(0, tickCount - 1).map(function () {\n      return Infinity;\n    }))) : _toConsumableArray((0, _utils.range)(0, tickCount - 1).map(function () {\n      return -Infinity;\n    })).concat([cormax]);\n\n    return min > max ? (0, _utils.reverse)(_values) : _values;\n  }\n\n  if (cormin === cormax) {\n    return getTickOfSingleValue(cormin, tickCount, allowDecimals);\n  } // Get the step between two ticks\n\n\n  var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals),\n      step = _calculateStep.step,\n      tickMin = _calculateStep.tickMin,\n      tickMax = _calculateStep.tickMax;\n\n  var values = _arithmetic.default.rangeStep(tickMin, tickMax.add(new _decimal.default(0.1).mul(step)), step);\n\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n/**\n * Calculate the ticks of an interval, the count of ticks won't be guraranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getTickValuesFn(_ref5) {\n  var _ref6 = _slicedToArray(_ref5, 2),\n      min = _ref6[0],\n      max = _ref6[1];\n\n  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // More than two ticks should be return\n  var count = Math.max(tickCount, 2);\n\n  var _getValidInterval3 = getValidInterval([min, max]),\n      _getValidInterval4 = _slicedToArray(_getValidInterval3, 2),\n      cormin = _getValidInterval4[0],\n      cormax = _getValidInterval4[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    return [min, max];\n  }\n\n  if (cormin === cormax) {\n    return getTickOfSingleValue(cormin, tickCount, allowDecimals);\n  }\n\n  var step = getFormatStep(new _decimal.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);\n  var fn = (0, _utils.compose)((0, _utils.map)(function (n) {\n    return new _decimal.default(cormin).add(new _decimal.default(n).mul(step)).toNumber();\n  }), _utils.range);\n  var values = fn(0, count).filter(function (entry) {\n    return entry >= cormin && entry <= cormax;\n  });\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n/**\n * Calculate the ticks of an interval, the count of ticks won't be guraranteed,\n * but the domain will be guaranteed\n *\n * @param  {Number}  min, max      min: The minimum value, max: The maximum value\n * @param  {Integer} tickCount     The count of ticks\n * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not\n * @return {Array}   ticks\n */\n\n\nfunction getTickValuesFixedDomainFn(_ref7, tickCount) {\n  var _ref8 = _slicedToArray(_ref7, 2),\n      min = _ref8[0],\n      max = _ref8[1];\n\n  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  // More than two ticks should be return\n  var _getValidInterval5 = getValidInterval([min, max]),\n      _getValidInterval6 = _slicedToArray(_getValidInterval5, 2),\n      cormin = _getValidInterval6[0],\n      cormax = _getValidInterval6[1];\n\n  if (cormin === -Infinity || cormax === Infinity) {\n    return [min, max];\n  }\n\n  if (cormin === cormax) {\n    return [cormin];\n  }\n\n  var count = Math.max(tickCount, 2);\n  var step = getFormatStep(new _decimal.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);\n\n  var values = _toConsumableArray(_arithmetic.default.rangeStep(new _decimal.default(cormin), new _decimal.default(cormax).sub(new _decimal.default(0.99).mul(step)), step)).concat([cormax]);\n\n  return min > max ? (0, _utils.reverse)(values) : values;\n}\n\nvar getNiceTickValues = (0, _utils.memoize)(getNiceTickValuesFn);\nexports.getNiceTickValues = getNiceTickValues;\nvar getTickValues = (0, _utils.memoize)(getTickValuesFn);\nexports.getTickValues = getTickValues;\nvar getTickValuesFixedDomain = (0, _utils.memoize)(getTickValuesFixedDomainFn);\nexports.getTickValuesFixedDomain = getTickValuesFixedDomain;"},"lineCount":315}},"error":null,"hash":"6db414fb2b68c56cffdfb854e492c3a3","cacheData":{"env":{}}}